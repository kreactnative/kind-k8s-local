{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kind+Local Ingress+Istio+SSL","text":""},{"location":"#github-repo","title":"github repo","text":"<p>https://github.com/kreactnative/kind-k8s-local Github</p> <pre><code>git clone https://github.com/kreactnative/kind-k8s-local.git\ncd kind-k8s-local/docs/resources\n</code></pre>"},{"location":"#install-kubectl","title":"Install kubectl","text":"<pre><code>brew install kubernetes-cli\n</code></pre>"},{"location":"#install-istioctl","title":"Install Istioctl","text":"<pre><code>brew install istioctl\n</code></pre>"},{"location":"#install-docker-desktop","title":"Install Docker Desktop","text":"<pre><code>brew install --cask docker\n</code></pre>"},{"location":"#install-kind","title":"Install Kind","text":"<pre><code>brew install kind\n</code></pre>"},{"location":"#install-mkcert","title":"Install mkcert","text":"<pre><code>brew install mkcert\n</code></pre>"},{"location":"cluster/","title":"Cluster","text":""},{"location":"cluster/#create-kind-config","title":"Create kind config","text":""},{"location":"cluster/#clusteryaml","title":"cluster.yaml","text":"<pre><code>kind: Cluster\napiVersion: kind.x-k8s.io/v1alpha4\nnodes:\n- role: control-plane\n  kubeadmConfigPatches:\n  - |\n    kind: InitConfiguration\n    nodeRegistration:\n      kubeletExtraArgs:\n        node-labels: \"ingress-ready=true\"    \n  extraPortMappings:\n  - containerPort: 80\n    hostPort: 80\n    listenAddress: 127.0.0.1\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    listenAddress: 127.0.0.1\n    protocol: TCP\n  - containerPort: 443\n    hostPort: 443\n    listenAddress: 127.0.0.1\n    protocol: UDP\n</code></pre>"},{"location":"cluster/#create-cluster","title":"Create cluster","text":"<pre><code>kind create cluster --config cluster.yaml\n</code></pre>"},{"location":"cluster/#output","title":"Output","text":"<pre><code>Creating cluster \"kind\" ...\n \u2713 Ensuring node image (kindest/node:v1.27.3) \ud83d\uddbc \n \u2713 Preparing nodes \ud83d\udce6  \n \u2713 Writing configuration \ud83d\udcdc \n \u2713 Starting control-plane \ud83d\udd79\ufe0f \n \u2713 Installing CNI \ud83d\udd0c \n \u2713 Installing StorageClass \ud83d\udcbe \nSet kubectl context to \"kind-kind\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-kind\n\nHave a nice day! \ud83d\udc4b\n</code></pre>"},{"location":"cluster/#get-nodes","title":"Get nodes","text":"<pre><code>kubectl get nodes -o wide\nNAME                 STATUS   ROLES           AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                         KERNEL-VERSION        CONTAINER-RUNTIME\nkind-control-plane   Ready    control-plane   26s   v1.27.3   172.18.0.2    &lt;none&gt;        Debian GNU/Linux 11 (bullseye)   5.15.49-linuxkit-pr   containerd://1.7.1\n</code></pre>"},{"location":"create-test-site/","title":"Test Deploy flutter site","text":"<pre><code>\u251c\u2500\u2500 cluster.yaml\n\u251c\u2500\u2500 flutter\n\u2502   \u2514\u2500\u2500 deployment.yaml\n\u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 kind-local-docker.jpg\n\u251c\u2500\u2500 istio\n\u2502   \u2514\u2500\u2500 istio-operator.yaml\n\u251c\u2500\u2500 istio-gateway.yaml\n\u251c\u2500\u2500 metal-lb\n\u2502   \u251c\u2500\u2500 configmap.yaml\n\u2502   \u2514\u2500\u2500 metallb.yaml\n\u251c\u2500\u2500 metrics-server\n\u2502   \u2514\u2500\u2500 components.yaml\n\u2514\u2500\u2500 ssl\n    \u251c\u2500\u2500 _wildcard.kind.local-key.pem\n    \u2514\u2500\u2500 _wildcard.kind.local.pem\n</code></pre>"},{"location":"create-test-site/#create-deploymentservicevirtual-service","title":"Create deployment/service/virtual service","text":"<pre><code>kubectl create ns flutter\nkubectl apply -f flutter/deployment.yaml -n flutter\n</code></pre>"},{"location":"create-test-site/#output","title":"Output","text":"<pre><code>namespace/flutter created\nservice/flutter-test-svc created\ndeployment.apps/flutter-test created\nvirtualservice.networking.istio.io/flutter-web-vs created\n</code></pre>"},{"location":"create-test-site/#get-visual-service","title":"Get Visual Service","text":"<pre><code>kubectl get vs -A\nflutter     flutter-web-vs   [\"istio-system/local-gateway\"]   [\"flutter.kind.local\"]   41s\n</code></pre>"},{"location":"gateway/","title":"Istio Gateway","text":"<p>istio-gateway.yaml</p> <pre><code>apiVersion: networking.istio.io/v1beta1\nkind: Gateway\nmetadata:\n  name: local-gateway\nspec:\n  selector:\n    app: istio-ingressgateway\n    istio: ingressgateway\n  servers:\n    - port:\n        number: 80\n        name: http\n        protocol: HTTP\n      hosts:\n        - \"*.kind.local\"\n      tls:\n        httpsRedirect: true\n    - port:\n        number: 443\n        name: https\n        protocol: HTTPS\n      hosts:\n        - \"*.kind.local\"\n      tls:\n        mode: SIMPLE\n        credentialName: local-cred\n</code></pre>"},{"location":"gateway/#install-gateway","title":"Install Gateway","text":"<pre><code>kubectl apply -f istio-gateway.yaml -n istio-system\n</code></pre>"},{"location":"gateway/#output","title":"Output","text":"<pre><code>gateway.networking.istio.io/local-gateway created\n</code></pre>"},{"location":"istio/","title":"Istio Service Mesh","text":"<pre><code>\u251c\u2500\u2500 cluster.yaml\n\u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 kind-local-docker.jpg\n\u251c\u2500\u2500 istio\n\u2502   \u2514\u2500\u2500 istio-operator.yaml\n\u251c\u2500\u2500 metal-lb\n\u2502   \u251c\u2500\u2500 configmap.yaml\n\u2502   \u2514\u2500\u2500 metallb.yaml\n\u251c\u2500\u2500 metrics-server\n\u2502   \u2514\u2500\u2500 components.yaml\n\u2514\u2500\u2500 ssl\n    \u251c\u2500\u2500 _wildcard.kind.local-key.pem\n    \u2514\u2500\u2500 _wildcard.kind.local.pem\n</code></pre>"},{"location":"istio/#install-istio","title":"Install Istio","text":"<pre><code>istioctl install -f istio/istio-operator.yaml -y\n</code></pre>"},{"location":"istio/#output","title":"Output","text":"<pre><code>\u2714 Istio core installed                                                                                                                                                                                     \n\u2714 Istiod installed                                                                                                                                                                                         \n\u2714 Ingress gateways installed                                                                                                                                                                               \n\u2714 Installation complete                                                                                                                                                                         Making this installation the default for injection and validation.\n</code></pre>"},{"location":"istio/#loadbalancer","title":"Loadbalancer","text":"<pre><code>kubectl get svc -n istio-system\nNAME                   TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)                                                    AGE\nistio-ingressgateway   LoadBalancer   10.96.77.242    172.19.0.2    15021:30489/TCP,80:31804/TCP,443:30568/TCP,443:30568/UDP   63s\nistiod                 ClusterIP      10.96.216.145   &lt;none&gt;        15010/TCP,15012/TCP,443/TCP,15014/TCP                      77s\n</code></pre>"},{"location":"metal-lb/","title":"MetalLB","text":"<pre><code>\u251c\u2500\u2500 cluster.yaml\n\u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 kind-local-docker.jpg\n\u251c\u2500\u2500 metal-lb\n\u2502   \u251c\u2500\u2500 configmap.yaml\n\u2502   \u2514\u2500\u2500 metallb.yaml\n\u2514\u2500\u2500 metrics-server\n    \u2514\u2500\u2500 components.yaml\n</code></pre> <pre><code>kubectl create ns metallb-system\nkubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=\"$(openssl rand -base64 128)\"\nkubectl apply -f metal-lb --validate=false\n</code></pre>"},{"location":"metal-lb/#output","title":"Output","text":"<pre><code>namespace/metallb-system created\nsecret/memberlist created\nconfigmap/config created\nserviceaccount/controller created\nserviceaccount/speaker created\nclusterrole.rbac.authorization.k8s.io/metallb-system:controller created\nclusterrole.rbac.authorization.k8s.io/metallb-system:speaker created\nrole.rbac.authorization.k8s.io/config-watcher created\nrole.rbac.authorization.k8s.io/pod-lister created\nrole.rbac.authorization.k8s.io/controller created\nclusterrolebinding.rbac.authorization.k8s.io/metallb-system:controller created\nclusterrolebinding.rbac.authorization.k8s.io/metallb-system:speaker created\nrolebinding.rbac.authorization.k8s.io/config-watcher created\nrolebinding.rbac.authorization.k8s.io/pod-lister created\nrolebinding.rbac.authorization.k8s.io/controller created\ndaemonset.apps/speaker created\ndeployment.apps/controller created\nresource mapping not found for name: \"controller\" namespace: \"\" from \"metal-lb/metallb.yaml\": no matches for kind \"PodSecurityPolicy\" in version \"policy/v1beta1\"\nensure CRDs are installed first\nresource mapping not found for name: \"speaker\" namespace: \"\" from \"metal-lb/metallb.yaml\": no matches for kind \"PodSecurityPolicy\" in version \"policy/v1beta1\"\nensure CRDs are installed first\n</code></pre>"},{"location":"metrics-server/","title":"Metrics Server","text":"<p>cd docs/resources</p> <pre><code>\u251c\u2500\u2500 cluster.yaml\n\u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 kind-local-docker.jpg\n\u2514\u2500\u2500 metrics-server\n    \u2514\u2500\u2500 components.yaml\n</code></pre> <pre><code>kubectl apply -f metrics-server --validate=false\n</code></pre>"},{"location":"metrics-server/#output","title":"Output","text":"<pre><code>serviceaccount/metrics-server created\nclusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created\nclusterrole.rbac.authorization.k8s.io/system:metrics-server created\nrolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created\nclusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created\nclusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created\nservice/metrics-server created\ndeployment.apps/metrics-server created\napiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created\n</code></pre> <pre><code>kubectl top nodes\nNAME                  CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   \nlocal-control-plane   347m         2%     711Mi           9%        \nlocal-worker          58m          0%     154Mi           1%        \nlocal-worker2         42m          0%     126Mi           1%       \n</code></pre>"},{"location":"mkcert-ssl/","title":"SSL","text":"<pre><code>mkcert \"*.kind.local\"\n</code></pre>"},{"location":"mkcert-ssl/#output","title":"Output","text":"<pre><code>Created a new certificate valid for the following names \ud83d\udcdc\n - \"*.kind.local\"\n\nReminder: X.509 wildcards only go one level deep, so this won't match a.b.kind.local \u2139\ufe0f\n\nThe certificate is at \"./_wildcard.kind.local.pem\" and the key at \"./_wildcard.kind.local-key.pem\" \u2705\n\nIt will expire on 27 November 2025 \ud83d\uddd3\n</code></pre>"},{"location":"mkcert-ssl/#ssl_1","title":"SSL","text":"<pre><code>\u251c\u2500\u2500 _wildcard.kind.local-key.pem\n\u2514\u2500\u2500 _wildcard.kind.local.pem\n</code></pre>"},{"location":"mkcert-ssl/#create-secret","title":"Create Secret","text":"<pre><code>kubectl create ns istio-system\nkubectl -n istio-system create secret tls local-cred --key=ssl/_wildcard.kind.local-key.pem --cert=ssl/_wildcard.kind.local.pem\n</code></pre>"},{"location":"mkcert-ssl/#outpute","title":"Outpute","text":"<pre><code>namespace/istio-system created\nsecret/local-cred created\n</code></pre>"},{"location":"mkcert-ssl/#installing-the-ca-on-other-systems","title":"Installing the CA on other systems","text":"<pre><code>mkcert -install\n</code></pre>"},{"location":"mkcert-ssl/#outpute_1","title":"Outpute","text":"<pre><code>The local CA is already installed in the system trust store! \ud83d\udc4d\n</code></pre>"},{"location":"network-dns/","title":"DNS","text":"<pre><code>brew install dnsmasq\n</code></pre>"},{"location":"network-dns/#add-dnsmasqconf","title":"add dnsmasq.conf","text":"<pre><code>sudo vi /usr/local/etc/dnsmasq.conf\n</code></pre> <pre><code>address=/kind.local/127.0.0.1\nserver=8.8.8.8\nserver=8.8.4.4\n</code></pre>"},{"location":"network-dns/#restart-service","title":"restart service","text":"<pre><code>sudo brew services restart dnsmasq\n</code></pre>"},{"location":"network-dns/#create-resolver","title":"create resolver","text":"<pre><code>sudo mkdir /etc/resolver/\ncat &lt;&lt;EOF | sudo tee /etc/resolver/kind.local\ndomain kind.local\nsearch kind.local\nnameserver 127.0.0.1\nEOF\n</code></pre>"},{"location":"network-dns/#restart-mdnsresponder","title":"Restart mDNSResponder","text":"<pre><code>sudo killall -HUP mDNSResponder\n</code></pre> <pre><code>scutil --dns\n</code></pre>"},{"location":"network-dns/#test-dns","title":"test dns","text":"<pre><code>dig flutter.kind.local\n</code></pre>"},{"location":"test-site/","title":"Test Site","text":""},{"location":"test-site/#test-site","title":"Test Site","text":"<pre><code>curl -i https://flutter.kind.local\nopen https://flutter.kind.local\n</code></pre>"}]}